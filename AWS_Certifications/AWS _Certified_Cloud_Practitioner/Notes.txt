aws.amazon.com/certification
aws.amazon.com/documentation
aws.amazon.com/whitepapers
aws.amazon.com/products
aws.amazon.com/new
https://aws.amazon.com/serverless/resources/?serverless.sort-by=item.additionalFields.createdDate&serverless.sort-order=desc

# Full overview in 01-010-010-lab-notes.pdf

# Storage
create new S3
volodymyr-s3-bucket-001-v1

# RDS
My-Sql
# db name
database-rds-vavas-v1
# New VPC security group name
rds-vavas-group
# Initial database name
db_rds_vavas_v1
 MySQL  JS > \connect vavas@database-rds-vavas-v1.cdyebgqeson2.us-east-1.rds.amazonaws.com
 \sql
 show databases;
 \use mysql
 show tables;

# EC2

# SES

# Analytics

# Creatingan IAM User

# aws cloud9
aws --version
aws s3 mb s3://vavas-bucket-v2
aws s3 cp unnamed.jpg  s3://vavas-bucket-v2
aws s3 rm s3://vavas-bucket-v2/unnamed.jpg
aws s3 rb s3://vavas-bucket-v2

# Elastic Beanstalk
vavas-ElasticBeanstalk

https://aws.amazon.com/free

https://aws.amazon.com/architecture/
https://aws.amazon.com/whitepapers/?whitepapers-main.sort-by=item.additionalFields.sortDate&whitepapers-main.sort-order=desc&awsf.whitepapers-content-type=content-type%23arch-diagram&awsm.page-whitepapers-main=2

https://github.com/aws-samples
https://github.com/aws-samples?language=python
https://github.com/aws-samples/aws-serverless-ecommerce-platform
https://github.com/aws-samples/aws-serverless-airline-booking


# Bulletproof Serverless HTML5 Websites
Route 53 - > Registered domains volodymyrmoskov.com

# S3 backet to domain map
http://volodymyrmoskov.com.s3-website-us-east-1.amazonaws.com/

# AWS Certificate Manager

# AWS CloudFront Distribution
Route 53 - > redirect from https and www
www.whatsmydns

to refresh static contend
CloudFront Distributions -> Invalidations

# create user
vova
# create group
Administrators
# create role
vova-ec2-role
# create alias
vova-iam

# MFA
https://authy.com/download/

# trustedadvisor

# Cognito
React + GraphQL = Serverless Apps, no Lambda required, no dedicated nodejs server

# EC2
# Nodejs server
SSH with Connect to your instance option
yum update -y
# ip forwarding
iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
iptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT
iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
~/.nvm/nvm.sh
nvm install node
node --version
npm install express -g
yum install git -y
git --version
git clone https://github.com/BackSpaceTech/node-js-sample.git
cd node-js-sample/
ls -lah
npm install
DEBUG=node-js-sample:* npm start
# go tu public ip
ec2-18-218-210-210.us-east-2.compute.amazonaws.com

# create EC2 image

# create EBS for EC2
# mount ESB storage as drive in Linux
ssh -i "NVirginia-SSH-ESB.pem" ec2-user@ec2-34-201-61-170.compute-1.amazonaws.com
lsblk
# check file system on ESB drive
sudo file -s /dev/xvdb
# create file system on ESB drive
sudo mkfs -e ext4 /dev/xvdb
# make dir to be mount point for storage
sudo mkdir /data
sudo mount /dev/xvdb /data
# make backup of fstab
sudo cp /etc/fstab /etc/fstab.origin
# UUID=3860d2ff-3645-4014-8914-58fd1111f39d
UUID=3860d2ff-3645-4014-8914-58fd1111f39d   /data   ext4   defaults,nofail   0    2
# check mount errors
sudo mount -a
cd /data
sudo touch test.txt
# make ESB snapshot
# create another volume from this  snapshot
# create another EC2 instance
# add existing volume to new EC2 instance

# ECS
vova-cluster-ECS

# EFS
Name: vova-EFS-Zones
create new EC2 which will use EFS
sg-0822e4d1b06d92bdd

# mount EFS on EC2
sudo mkdir efs
sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-a875cb2b.efs.us-east-1.amazonaws.com:/ efs
cd efs
sudo touch test.txt

# S3 - versioning
create nes bucket - s3-handson-v2
set life cycle rule tp move all version in archive to glassier

# S3 asses policy






